openapi: 3.0.0
info:
  title: TMS API Gateway
  description: Transport Management System API Documentation
  version: 2.0.0
  contact:
    name: TMS Support
    email: support@tms-logistics.ru
    
servers:
  - url: http://localhost:4000/api
    description: Development server
  - url: https://api.tms-logistics.ru/api
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
              
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        role:
          type: string
          enum: [admin, manager, dispatcher, viewer]
        phone:
          type: string
          
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        oms_order_id:
          type: string
        order_number:
          type: string
        customer_name:
          type: string
        customer_phone:
          type: string
        delivery_address:
          type: string
        delivery_lat:
          type: number
        delivery_lng:
          type: number
        status:
          type: string
          enum: [pending, assigned, picked_up, in_transit, delivered, failed, cancelled]
        delivery_status:
          type: string
          enum: [awaiting_pickup, picked_up, in_transit, delivered, failed, returned, cancelled]
        order_value:
          type: number
        is_priority:
          type: boolean
        created_at:
          type: string
          format: date-time
          
    Courier:
      type: object
      properties:
        id:
          type: string
          format: uuid
        full_name:
          type: string
        email:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [active, inactive, on_duty, off_duty, deleted]
        is_available:
          type: boolean
        license_number:
          type: string
        license_types:
          type: array
          items:
            type: string
        current_vehicle_id:
          type: string
          format: uuid
        current_location_lat:
          type: number
        current_location_lng:
          type: number
        rating:
          type: number
        total_deliveries:
          type: integer
        emergency_contact:
          type: string
        emergency_phone:
          type: string
        
    CourierShift:
      type: object
      properties:
        id:
          type: string
          format: uuid
        courier_id:
          type: string
          format: uuid
        shift_start:
          type: string
          format: date-time
        shift_end:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, paused, completed]
        orders_delivered:
          type: integer
        total_distance:
          type: number
        pause_reason:
          type: string
        end_notes:
          type: string
        
    Vehicle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        plate_number:
          type: string
        vehicle_type:
          type: string
          enum: [bicycle, motorcycle, car, van, truck]
        brand:
          type: string
        model:
          type: string
        year:
          type: integer
        color:
          type: string
        status:
          type: string
          enum: [available, in_use, maintenance, out_of_service, deleted]
        assigned_to:
          type: string
          format: uuid
        capacity_kg:
          type: number
        capacity_m3:
          type: number
        fuel_type:
          type: string
          enum: [gasoline, diesel, electric, hybrid]
        fuel_consumption_per_100km:
          type: number
        insurance_expiry:
          type: string
          format: date
        registration_expiry:
          type: string
          format: date
        last_maintenance_date:
          type: string
          format: date
        next_maintenance_date:
          type: string
          format: date
        
    Route:
      type: object
      properties:
        id:
          type: string
          format: uuid
        route_number:
          type: string
        courier_id:
          type: string
        vehicle_id:
          type: string
        status:
          type: string
          enum: [planned, active, completed, cancelled]
        orders_count:
          type: integer
        total_distance:
          type: number
        planned_start_time:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        ended_at:
          type: string
          format: date-time

security:
  - bearerAuth: []

paths:
  /health:
    get:
      summary: Health check
      tags: [System]
      security: []
      responses:
        200:
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                  services:
                    type: object
                    
  # Auth Service
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                  refreshToken:
                    type: string
                    
  /auth/register:
    post:
      summary: Register new user
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, full_name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                full_name:
                  type: string
                phone:
                  type: string
                role:
                  type: string
                  enum: [admin, manager, dispatcher, viewer]
      responses:
        201:
          description: User registered successfully
          
  /auth/refresh:
    post:
      summary: Refresh access token
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Token refreshed
          
  /auth/logout:
    post:
      summary: Logout user
      tags: [Authentication]
      responses:
        200:
          description: Logged out successfully
          
  /auth/me:
    get:
      summary: Get current user
      tags: [Authentication]
      responses:
        200:
          description: Current user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                    
  # Courier Service
  /couriers:
    get:
      summary: Get couriers list
      tags: [Couriers]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, on_duty, off_duty]
        - name: vehicle_type
          in: query
          schema:
            type: string
        - name: is_available
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: Couriers list
          content:
            application/json:
              schema:
                type: object
                properties:
                  couriers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Courier'
                  total:
                    type: integer
                    
    post:
      summary: Create new courier
      tags: [Couriers]
      description: Only managers and admins can create couriers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [full_name, phone, email]
              properties:
                full_name:
                  type: string
                phone:
                  type: string
                email:
                  type: string
                birth_date:
                  type: string
                  format: date
                license_number:
                  type: string
                license_types:
                  type: array
                  items:
                    type: string
                emergency_contact:
                  type: string
                emergency_phone:
                  type: string
                address:
                  type: string
                bank_account:
                  type: string
      responses:
        201:
          description: Courier created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  courier:
                    $ref: '#/components/schemas/Courier'
                  
  /couriers/{id}:
    get:
      summary: Get courier by ID
      tags: [Couriers]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Courier details
          content:
            application/json:
              schema:
                type: object
                properties:
                  courier:
                    $ref: '#/components/schemas/Courier'
                  currentShift:
                    $ref: '#/components/schemas/CourierShift'
                  statistics:
                    type: object
                    
    put:
      summary: Update courier
      tags: [Couriers]
      description: Only managers and admins can update couriers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Courier'
      responses:
        200:
          description: Courier updated successfully
          
    delete:
      summary: Delete courier (soft delete)
      tags: [Couriers]
      description: Only admins can delete couriers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Courier deleted successfully
          
  /couriers/{id}/assign-vehicle:
    post:
      summary: Assign vehicle to courier
      tags: [Couriers]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vehicle_id]
              properties:
                vehicle_id:
                  type: string
                  format: uuid
      responses:
        200:
          description: Vehicle assigned successfully
          
  /couriers/{id}/remove-vehicle:
    post:
      summary: Remove vehicle from courier
      tags: [Couriers]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Vehicle removed successfully
          
  /couriers/{id}/availability:
    patch:
      summary: Update courier availability
      tags: [Couriers]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [is_available]
              properties:
                is_available:
                  type: boolean
      responses:
        200:
          description: Availability updated
          
  /couriers/{id}/metrics:
    get:
      summary: Get courier performance metrics
      tags: [Couriers]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        200:
          description: Courier metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  courier_id:
                    type: string
                  metrics:
                    type: object
                  success_rate:
                    type: number
                    
  # Courier Shifts
  /shifts:
    get:
      summary: Get shifts list
      tags: [Shifts]
      parameters:
        - name: courier_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [active, paused, completed]
        - name: date_from
          in: query
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          schema:
            type: string
            format: date
      responses:
        200:
          description: Shifts list
          content:
            application/json:
              schema:
                type: object
                properties:
                  shifts:
                    type: array
                    items:
                      $ref: '#/components/schemas/CourierShift'
                      
  /shifts/start:
    post:
      summary: Start courier shift
      tags: [Shifts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [courier_id]
              properties:
                courier_id:
                  type: string
                  format: uuid
                vehicle_id:
                  type: string
                  format: uuid
                start_lat:
                  type: number
                start_lng:
                  type: number
      responses:
        201:
          description: Shift started
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  shift_id:
                    type: string
                    
  /shifts/{id}/end:
    post:
      summary: End courier shift
      tags: [Shifts]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                end_notes:
                  type: string
                end_lat:
                  type: number
                end_lng:
                  type: number
      responses:
        200:
          description: Shift ended
          
  /shifts/{id}/pause:
    post:
      summary: Pause shift
      tags: [Shifts]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        200:
          description: Shift paused
          
  /shifts/{id}/resume:
    post:
      summary: Resume shift
      tags: [Shifts]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Shift resumed
          
  /shifts/active:
    get:
      summary: Get active shifts
      tags: [Shifts]
      responses:
        200:
          description: Active shifts list
          
  # Vehicle Service
  /vehicles:
    get:
      summary: Get vehicles list
      tags: [Vehicles]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [available, in_use, maintenance, out_of_service]
        - name: vehicle_type
          in: query
          schema:
            type: string
            enum: [bicycle, motorcycle, car, van, truck]
        - name: assigned_to
          in: query
          schema:
            type: string
            format: uuid
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: Vehicles list
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehicles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vehicle'
                  total:
                    type: integer
                    
    post:
      summary: Create new vehicle
      tags: [Vehicles]
      description: Only managers and admins can create vehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [plate_number, vehicle_type, brand, model]
              properties:
                plate_number:
                  type: string
                vehicle_type:
                  type: string
                  enum: [bicycle, motorcycle, car, van, truck]
                brand:
                  type: string
                model:
                  type: string
                year:
                  type: integer
                color:
                  type: string
                capacity_kg:
                  type: number
                capacity_m3:
                  type: number
                fuel_type:
                  type: string
                fuel_consumption_per_100km:
                  type: number
                insurance_expiry:
                  type: string
                  format: date
                registration_expiry:
                  type: string
                  format: date
      responses:
        201:
          description: Vehicle created successfully
          
  /vehicles/available:
    get:
      summary: Get available vehicles
      tags: [Vehicles]
      parameters:
        - name: vehicle_type
          in: query
          schema:
            type: string
      responses:
        200:
          description: Available vehicles
          
  /vehicles/stats:
    get:
      summary: Get vehicle statistics
      tags: [Vehicles]
      responses:
        200:
          description: Vehicle statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  overview:
                    type: object
                  by_type:
                    type: array
                    items:
                      type: object
                      
  /vehicles/{id}:
    get:
      summary: Get vehicle by ID
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Vehicle details
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehicle:
                    $ref: '#/components/schemas/Vehicle'
                  maintenance_history:
                    type: array
                    items:
                      type: object
                  statistics:
                    type: object
                    
    put:
      summary: Update vehicle
      tags: [Vehicles]
      description: Only managers and admins can update vehicles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        200:
          description: Vehicle updated successfully
          
    delete:
      summary: Delete vehicle (soft delete)
      tags: [Vehicles]
      description: Only admins can delete vehicles
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Vehicle deleted successfully
          
  /vehicles/{id}/assign:
    post:
      summary: Assign vehicle to courier
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [courier_id]
              properties:
                courier_id:
                  type: string
                  format: uuid
      responses:
        200:
          description: Vehicle assigned successfully
          
  /vehicles/{id}/release:
    post:
      summary: Release vehicle from courier
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Vehicle released successfully
          
  /vehicles/{id}/status:
    patch:
      summary: Update vehicle status
      tags: [Vehicles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [available, in_use, maintenance, out_of_service]
                notes:
                  type: string
      responses:
        200:
          description: Status updated successfully